import unittest
from pyvirtualdisplay import Display
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
import tempfile
import os
import time
import sys
import hashlib
from end_to_end_tests.pages.plone_homepage import PloneHomepage


class SDMExperimentTests(unittest.TestCase):



    def setUp(self):

        try:
            url = os.environ['URL']
        except KeyError:
            raise
        self.display = Display(visible=0, size=(3000, 2000))
        self.display.start()


        fp = webdriver.FirefoxProfile()
        # global temp_dir
        # temp_dir = tempfile.mkdtemp()
        # print temp_dir
        # TODO: change directory
        fp.set_preference("browser.download.dir", "/Users/vincentwong/PycharmProjects/BCCVL_Test_Environment/end_to_end_tests/download")
        fp.set_preference("browser.download.folderList", 2)
        fp.set_preference("browser.helperApps.alwaysAsk.force", False)
        fp.set_preference("browser.download.manager.showWhenStarting", False)
        fp.set_preference("browser.helperApps.neverAsk.openFile", "image/png, text/html, image/tiff, text/csv, text/plain, application/octet-stream, application/zip")
        fp.set_preference("browser.helperApps.neverAsk.saveToDisk",  "image/png, text/html, image/tiff, text/csv, text/plain, application/octet-stream, application/zip")
        self.driver = webdriver.Firefox(firefox_profile=fp)
        self.driver.get(url)
        self.driver.maximize_window()
        self.driver.implicitly_wait(10)

    def test_login(self):

        print sys._getframe().f_code.co_name
        plone_homepage = PloneHomepage(self.driver)
        self.assertEqual("BCCVL Home", plone_homepage.title)
        bccvl_homepage = plone_homepage.valid_login('admin', 'admin')
        self.assertEqual("BCCVL Home", bccvl_homepage.title)

    def test_sdm_experiment_ensure_mandatory_experiment_name_enforced(self):

        print sys._getframe().f_code.co_name
        plone_homepage = PloneHomepage(self.driver)
        self.assertEqual("BCCVL Home", plone_homepage.title)
        bccvl_homepage = plone_homepage.valid_login('admin', 'admin')
        self.assertEqual("BCCVL Home", bccvl_homepage.title)
        experiment_homepage = bccvl_homepage.click_experiments()
        self.assertEqual("BCCVL Experiment List", experiment_homepage.title)
        create_experiment_page = experiment_homepage.click_new_sdm_experiment()
        self.assertEqual("BCCVL New SDM Experiment", create_experiment_page.title)
        create_experiment_page.select_run()
        create_experiment_page.select_submit_invalid_experiment()
        self.assertEqual("BCCVL New SDM Experiment", create_experiment_page.title)
        create_experiment_page.check_text_displayed("Please supply a descriptive name for this experiment.")
        create_experiment_page.check_tab_displayed("Description")
        create_experiment_page.check_experiment_name_textbox()
        create_experiment_page.check_experiment_description_textbox()

    def test_sdm_experiment_ensure_experiment_name_cannot_begin_wtih_underscore_BCCVL302_Bug(self):

        print sys._getframe().f_code.co_name
        plone_homepage = PloneHomepage(self.driver)
        self.assertEqual("BCCVL Home", plone_homepage.title)
        bccvl_homepage = plone_homepage.valid_login('admin', 'admin')
        self.assertEqual("BCCVL Home", bccvl_homepage.title)
        experiment_homepage = bccvl_homepage.click_experiments()
        self.assertEqual("BCCVL Experiment List", experiment_homepage.title)
        create_experiment_page = experiment_homepage.click_new_sdm_experiment()
        self.assertEqual("BCCVL New SDM Experiment", create_experiment_page.title)
        create_experiment_page.enter_experiment_name("_This should not work")
        create_experiment_page.select_run()
        create_experiment_page.select_submit_invalid_experiment()
        self.assertEqual("BCCVL New SDM Experiment", create_experiment_page.title)
        create_experiment_page.check_text_displayed("This value seems to be invalid.")
        create_experiment_page.check_tab_displayed("Description")
        create_experiment_page.check_experiment_name_textbox()
        create_experiment_page.check_experiment_description_textbox()

    def test_sdm_experiment_ensure_one_algorithm_need_to_be_selected(self):

        print sys._getframe().f_code.co_name
        plone_homepage = PloneHomepage(self.driver)
        self.assertEqual("BCCVL Home", plone_homepage.title)
        bccvl_homepage = plone_homepage.valid_login('admin', 'admin')
        self.assertEqual("BCCVL Home", bccvl_homepage.title)
        experiment_homepage = bccvl_homepage.click_experiments()
        self.assertEqual("BCCVL Experiment List", experiment_homepage.title)
        create_experiment_page = experiment_homepage.click_new_sdm_experiment()
        self.assertEqual("BCCVL New SDM Experiment", create_experiment_page.title)
        create_experiment_page.enter_experiment_name("ensure_one_algorithm_need_to_be_selected")
        create_experiment_page.select_run()
        create_experiment_page.select_submit_invalid_experiment()
        create_experiment_page.check_tab_displayed("Configuration")
        create_experiment_page.check_text_displayed("Please select at least 1 algorithm.")


    def test_sdm_experiment_ensure_one_set_of_occurrences_need_to_be_selected(self):

        print sys._getframe().f_code.co_name
        plone_homepage = PloneHomepage(self.driver)
        self.assertEqual("BCCVL Home", plone_homepage.title)
        bccvl_homepage = plone_homepage.valid_login('admin', 'admin')
        self.assertEqual("BCCVL Home", bccvl_homepage.title)
        experiment_homepage = bccvl_homepage.click_experiments()
        self.assertEqual("BCCVL Experiment List", experiment_homepage.title)
        create_experiment_page = experiment_homepage.click_new_sdm_experiment()
        self.assertEqual("BCCVL New SDM Experiment", create_experiment_page.title)
        create_experiment_page.enter_experiment_name("ensure_one_set_of_occurrences_need_to_be_selected")
        create_experiment_page.select_configuration()
        create_experiment_page.select_sdm_algorithm("Bioclim")
        create_experiment_page.select_run()
        create_experiment_page.select_submit_invalid_experiment()
        create_experiment_page.check_tab_displayed("Occurrences")
        create_experiment_page.check_text_displayed("Please choose a set of occurrences.")

    def test_sdm_experiment_ensure_one_set_of_absence_points_need_to_be_selected(self):

        print sys._getframe().f_code.co_name
        plone_homepage = PloneHomepage(self.driver)
        self.assertEqual("BCCVL Home", plone_homepage.title)
        bccvl_homepage = plone_homepage.valid_login('admin', 'admin')
        self.assertEqual("BCCVL Home", bccvl_homepage.title)
        experiment_homepage = bccvl_homepage.click_experiments()
        self.assertEqual("BCCVL Experiment List", experiment_homepage.title)
        create_experiment_page = experiment_homepage.click_new_sdm_experiment()
        self.assertEqual("BCCVL New SDM Experiment", create_experiment_page.title)
        create_experiment_page.enter_experiment_name("ensure_one_set_of_absence_points_need_to_be_selected")
        create_experiment_page.select_configuration()
        create_experiment_page.select_sdm_algorithm("Bioclim")
        create_experiment_page.select_occurrences()
        create_experiment_page.select_occurrences_dataset("ABT occurrence data")
        create_experiment_page.select_run()
        create_experiment_page.select_submit_invalid_experiment()
        create_experiment_page.check_tab_displayed("Absences")
        create_experiment_page.check_text_displayed("Please choose a set of absence points.")

    def test_sdm_experiment_ensure_at_least_two_environmental_layers_are_selected(self):

        print sys._getframe().f_code.co_name
        plone_homepage = PloneHomepage(self.driver)
        self.assertEqual("BCCVL Home", plone_homepage.title)
        bccvl_homepage = plone_homepage.valid_login('admin', 'admin')
        self.assertEqual("BCCVL Home", bccvl_homepage.title)
        experiment_homepage = bccvl_homepage.click_experiments()
        self.assertEqual("BCCVL Experiment List", experiment_homepage.title)
        create_experiment_page = experiment_homepage.click_new_sdm_experiment()
        self.assertEqual("BCCVL New SDM Experiment", create_experiment_page.title)
        create_experiment_page.enter_experiment_name("ensure_one_set_of_absence_points_need_to_be_selected")
        create_experiment_page.select_configuration()
        create_experiment_page.select_sdm_algorithm("Bioclim")
        create_experiment_page.select_occurrences()
        create_experiment_page.select_occurrences_dataset("ABT occurrence data")
        create_experiment_page.select_absences()
        create_experiment_page.select_absences_dataset("ABT absence data")
        create_experiment_page.select_run()
        create_experiment_page.select_submit_invalid_experiment()
        create_experiment_page.check_tab_displayed("Environment")
        create_experiment_page.check_text_displayed("Please select at least 2 environmental layers.")

    def test_create_bioclim_experiment(self):

        print sys._getframe().f_code.co_name
        plone_homepage = PloneHomepage(self.driver)
        self.assertEqual("BCCVL Home", plone_homepage.title)
        bccvl_homepage = plone_homepage.valid_login('admin', 'admin')
        self.assertEqual("BCCVL Home", bccvl_homepage.title)
        experiment_homepage = bccvl_homepage.click_experiments()
        self.assertEqual("BCCVL Experiment List", experiment_homepage.title)
        create_experiment_page = experiment_homepage.click_new_sdm_experiment()
        self.assertEqual("BCCVL New SDM Experiment", create_experiment_page.title)
        create_experiment_page.enter_experiment_name("ABT bioclim model and evaluation")
        create_experiment_page.enter_experiment_description("ABT bioclim model, current projection, and model evaluation")
        create_experiment_page.select_configuration()
        create_experiment_page.select_sdm_algorithm("Bioclim")
        create_experiment_page.select_occurrences()
        create_experiment_page.select_occurrences_dataset("Koala - Mini occurrence dataset for Redland City")
        create_experiment_page.select_absences()
        create_experiment_page.select_absences_dataset("Koala - Mini absence dataset for Redland City")
        create_experiment_page.select_environment()
        create_experiment_page.select_current_climate_layers("Current climate layers for Redland City, 30\" (~1km)")
        create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B01 - Annual Mean Temperature")
        create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B02 - Mean Diurnal Range (Mean of monthly (max temp - min temp))")
        create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B03 - Isothermality (BIO2/BIO7) (* 100)")
        create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B04 - Temperature Seasonality (standard deviation *100)")
        create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B05 - Max Temperature of Warmest Month")
        create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B06 - Min Temperature of Coldest Month")
        create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B07 - Temperature Annual Range (BIO5-BIO6)")
        create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B08 - Mean Temperature of Wettest Quarter")
        create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B09 - Mean Temperature of Driest Quarter")
        create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B10 - Mean Temperature of Warmest Quarter")
        create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B11 - Mean Temperature of Coldest Quarter")
        create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B12 - Annual Precipitation")
        create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B13 - Precipitation of Wettest Month")
        create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B14 - Precipitation of Driest Month")
        create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B15 - Precipitation Seasonality (Coefficient of Variation)")
        create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B16 - Precipitation of Wettest Quarter")
        create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B17 - Precipitation of Driest Quarter")
        create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B18 - Precipitation of Warmest Quarter")
        create_experiment_page.select_run()
        view_experiment_page = create_experiment_page.select_review_start_experiment()
        self.assertEqual("BCCVL Experiment Results", view_experiment_page.title)
        view_experiment_page.check_text_displayed("ABT bioclim model and evaluation")
        # view_experiment_page.wait_till_text_displayed("1 RUNNING", 240)
        view_experiment_page.wait_till_text_displayed("This experiment is complete. The results are available below.", 840)
        # view_experiment_page.select_results()
        # view_experiment_page.check_text_displayed("bioclim_06_response.png")
        # view_experiment_page.check_text_displayed("bioclim_01_response.png")
        # view_experiment_page.check_text_displayed("bioclim_05_response.png")
        # view_experiment_page.check_text_displayed("bioclim_15_response.png")
        # view_experiment_page.check_text_displayed("bioclim_12_response.png")
        # view_experiment_page.check_text_displayed("bioclim_16_response.png")
        # view_experiment_page.check_text_displayed("bioclim_04_response.png")
        # view_experiment_page.check_text_displayed("bioclim_17_response.png")
        # view_experiment_page.check_text_displayed("AUC.png")
        # view_experiment_page.check_text_displayed("sdm.Rout")
        # view_experiment_page.check_text_displayed("current.tif")
        # view_experiment_page.check_text_displayed("maxent_like_VariableImportance.csv")
        # view_experiment_page.check_text_displayed("model.object.RData")
        # view_experiment_page.check_text_displayed("combined.modelEvaluation.csv")
        # view_experiment_page.check_text_displayed("dismo.eval.object.RData")
        # view_experiment_page.check_text_displayed("biomod2_like_VariableImportance.csv")

    def test_create_brt_experiment(self):  #results may change

        print sys._getframe().f_code.co_name
        plone_homepage = PloneHomepage(self.driver)
        self.assertEqual("BCCVL Home", plone_homepage.title)
        bccvl_homepage = plone_homepage.valid_login('admin', 'admin')
        self.assertEqual("BCCVL Home", bccvl_homepage.title)
        experiment_homepage = bccvl_homepage.click_experiments()
        self.assertEqual("BCCVL Experiment List", experiment_homepage.title)
        create_experiment_page = experiment_homepage.click_new_sdm_experiment()
        self.assertEqual("BCCVL New SDM Experiment", create_experiment_page.title)
        create_experiment_page.enter_experiment_name("ABT brt model and evaluation ")
        create_experiment_page.enter_experiment_description("ABT brt model, current projection, and model evaluation")
        create_experiment_page.select_configuration()
        create_experiment_page.select_sdm_algorithm("Boosted Regression Tree")
        create_experiment_page.select_occurrences()
        create_experiment_page.select_occurrences_dataset("Koala - Mini occurrence dataset for Redland City")
        create_experiment_page.select_absences()
        create_experiment_page.select_absences_dataset("Koala - Mini absence dataset for Redland City")
        create_experiment_page.select_environment()
        create_experiment_page.select_current_climate_layers("Current climate layers for Australia, 2.5arcmin (~5km)")
        create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B01 - Annual Mean Temperature")
        create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B02 - Mean Diurnal Range (Mean of monthly (max temp - min temp))")
        create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B03 - Isothermality (BIO2/BIO7) (* 100)")
        create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B04 - Temperature Seasonality (standard deviation *100)")
        create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B05 - Max Temperature of Warmest Month")
        create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B06 - Min Temperature of Coldest Month")
        create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B07 - Temperature Annual Range (BIO5-BIO6)")
        create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B08 - Mean Temperature of Wettest Quarter")
        create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B09 - Mean Temperature of Driest Quarter")
        create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B10 - Mean Temperature of Warmest Quarter")
        create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B11 - Mean Temperature of Coldest Quarter")
        create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B12 - Annual Precipitation")
        create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B13 - Precipitation of Wettest Month")
        create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B14 - Precipitation of Driest Month")
        create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B15 - Precipitation Seasonality (Coefficient of Variation)")
        create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B16 - Precipitation of Wettest Quarter")
        create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B17 - Precipitation of Driest Quarter")
        create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B18 - Precipitation of Warmest Quarter")
        create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B19 - Precipitation of Coldest Quarter")
        create_experiment_page.select_run()
        view_experiment_page = create_experiment_page.select_review_start_experiment()
        self.assertEqual("BCCVL Experiment Results", view_experiment_page.title)
        view_experiment_page.wait_till_text_displayed("1 RUNNING", 240)
        view_experiment_page.wait_till_text_displayed("This experiment is complete. The results are available below.", 840)
    #     view_experiment_page.select_results()
    #     view_experiment_page.check_text_displayed("bioclim_01_response.png")
    #     view_experiment_page.check_text_displayed("bioclim_02_response.png")
    #     view_experiment_page.check_text_displayed("bioclim_03_response.png")
    #     view_experiment_page.check_text_displayed("bioclim_04_response.png")
    #     view_experiment_page.check_text_displayed("bioclim_05_response.png")
    #     view_experiment_page.check_text_displayed("bioclim_06_response.png")
    #     view_experiment_page.check_text_displayed("bioclim_07_response.png")
    #     view_experiment_page.check_text_displayed("bioclim_08_response.png")
    #     view_experiment_page.check_text_displayed("bioclim_09_response.png")
    #     view_experiment_page.check_text_displayed("bioclim_10_response.png")
    #     view_experiment_page.check_text_displayed("bioclim_11_response.png")
    #     view_experiment_page.check_text_displayed("bioclim_12_response.png")
    #     view_experiment_page.check_text_displayed("bioclim_13_response.png")
    #     view_experiment_page.check_text_displayed("bioclim_14_response.png")
    #     view_experiment_page.check_text_displayed("bioclim_15_response.png")
    #     view_experiment_page.check_text_displayed("bioclim_16_response.png")
    #     view_experiment_page.check_text_displayed("bioclim_17_response.png")
    #     view_experiment_page.check_text_displayed("bioclim_18_response.png")
    #     view_experiment_page.check_text_displayed("bioclim_19_response.png")
    #     view_experiment_page.check_text_displayed("biomod2_like_VariableImportance.csv")
    #     view_experiment_page.check_text_displayed("combined.modelEvaluation.csv")
    #     view_experiment_page.check_text_displayed("current.tif")
    #     view_experiment_page.check_text_displayed("dismo.eval.object.RData")
    #     view_experiment_page.check_text_displayed("future.tif")
    #     view_experiment_page.check_text_displayed("maxent_like_VariableImportance.csv")
    #     view_experiment_page.check_text_displayed("model.object.RData")
    #     view_experiment_page.check_text_displayed("results.html")
    # #
    # # def test_download_occurrence_dataset_from_ala(self):
    # #
    # #     print sys._getframe().f_code.co_name
    # #     plone_homepage = PloneHomepage(self.driver)
    # #     self.assertEqual("BCCVL Home", plone_homepage.title)
    # #     bccvl_homepage = plone_homepage.valid_login('admin', 'admin')
    # #     self.assertEqual("BCCVL Home", bccvl_homepage.title)
    # #     data_homepage = bccvl_homepage.click_data()
    # #     self.assertEqual("BCCVL Dataset List", data_homepage.title)
    # #     dataset_page = data_homepage.new_dataset()
    # #     dataset_page.select_find_occurrences()
    # #     dataset_page.enter_ala_search_string("Dingo Monster")
    # #     dataset_page.select_ala_dataset_to_download("(species) Cooloola dingo Dingo Monster")
    # #     dataset_page.check_species_selection("(species) 19 occurrences from ALA")
    # #     dataset_page.select_download_dataset()
    # #     dataset_page.check_import_message_displayed
    # #     time.sleep(30)
    # #     experiment_homepage = bccvl_homepage.click_experiments()
    # #     self.assertEqual("BCCVL Experiment List", experiment_homepage.title)
    # #     create_experiment_page = experiment_homepage.click_new_sdm_experiment()
    # #     self.assertEqual("BCCVL New SDM Experiment", create_experiment_page.title)
    # #     create_experiment_page.enter_experiment_name("Occurence dataset")
    # #     create_experiment_page.enter_experiment_description("Test Occurence dataset")
    # #     create_experiment_page.select_configuration()
    # #     create_experiment_page.select_sdm_algorithm("Bioclim")
    # #     create_experiment_page.select_occurrences()
    # #     create_experiment_page.select_occurrences_dataset("Dingo Monster (Cooloola dingo) occurrences")
    # #     create_experiment_page.select_absences()
    # #     create_experiment_page.select_absences_dataset("Koala - Mini absence dataset for Redland City")
    # #     create_experiment_page.select_environment()
    # #     create_experiment_page.select_current_climate_layers("Current climate layers for Redland City, 30\" (~1km)")
    # #     create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B01 - Annual Mean Temperature")
    # #     create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B02 - Mean Diurnal Range (Mean of monthly (max temp - min temp))")
    # #     create_experiment_page.select_environmental_datasets("Current climate layers for Redland City, 30\" (~1km)", "B03 - Isothermality (BIO2/BIO7) (* 100)")
    # #     create_experiment_page.select_run()
    # #     view_experiment_page = create_experiment_page.select_review_start_experiment()
    # #     self.assertEqual("BCCVL Experiment Results", view_experiment_page.title)
    # #     view_experiment_page.wait_till_text_displayed("This Experiment is running", 240)
    # #     view_experiment_page.wait_till_text_displayed("This Experiment is complete. The results are available below.", 840)
    # #     # view_experiment_page.select_results()
    # #      # in progress - awaiting reuslts

    # def test_brt_model_evaluate_config_1(self):

    #     print sys._getframe().f_code.co_name
    #     plone_homepage = PloneHomepage(self.driver)
    #     self.assertEqual("BCCVL Home", plone_homepage.title)
    #     bccvl_homepage = plone_homepage.valid_login('admin', 'admin')
    #     self.assertEqual("BCCVL Home", bccvl_homepage.title)
    #     experiment_homepage = bccvl_homepage.click_experiments()
    #     self.assertEqual("BCCVL Experiment List", experiment_homepage.title)
    #     create_experiment_page = experiment_homepage.click_new_sdm_experiment()
    #     self.assertEqual("BCCVL New SDM Experiment", create_experiment_page.title)
    #     create_experiment_page.enter_experiment_name("Phascolarctos cinereus brt model config1")
    #     create_experiment_page.enter_experiment_description("Phascolarctos cinereus brt model with modified parameters, a current projection, and model evaluation")
    #     create_experiment_page.select_configuration()
    #     create_experiment_page.select_sdm_algorithm("Boosted Regression Tree")
    #     create_experiment_page.select_algorithms_configuration("Boosted Regression Tree")
    #     create_experiment_page.enter_brt_config_tree_complexity("5")
    #     create_experiment_page.enter_brt_config_learning_rate("0.001")
    #     create_experiment_page.enter_brt_config_bag_fraction("0.5")
    #     create_experiment_page.enter_brt_config_var_monotone("-1")
    #     create_experiment_page.enter_brt_config_n_folds("7")
    #     create_experiment_page.enter_brt_config_prev_stratify(False)
    #     create_experiment_page.enter_brt_config_family("poisson")
    #     create_experiment_page.enter_brt_config_n_trees("75")
    #     create_experiment_page.enter_brt_config_max_trees("1500")
    #     create_experiment_page.enter_brt_config_tolerance_method("fixed")
    #     create_experiment_page.enter_brt_config_tolerance_value("0.00025")
    #     create_experiment_page.select_occurrences()
    #     create_experiment_page.select_occurrences_dataset("Koala - Mini occurrence dataset for Redland City")
    #     create_experiment_page.select_absences()
    #     create_experiment_page.select_absences_dataset("Koala - Mini absence dataset for Redland City")
    #     create_experiment_page.select_environment()
    #     create_experiment_page.select_current_climate_layers("Current climate layers for Australia, 2.5arcmin (~5km)")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B01 - Annual Mean Temperature")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B02 - Mean Diurnal Range (Mean of monthly (max temp - min temp))")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B03 - Isothermality (BIO2/BIO7) (* 100)")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B04 - Temperature Seasonality (standard deviation *100)")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B05 - Max Temperature of Warmest Month")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B06 - Min Temperature of Coldest Month")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B07 - Temperature Annual Range (BIO5-BIO6)")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B08 - Mean Temperature of Wettest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B09 - Mean Temperature of Driest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B10 - Mean Temperature of Warmest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B11 - Mean Temperature of Coldest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B12 - Annual Precipitation")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B13 - Precipitation of Wettest Month")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B14 - Precipitation of Driest Month")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B15 - Precipitation Seasonality (Coefficient of Variation)")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B16 - Precipitation of Wettest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B17 - Precipitation of Driest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B18 - Precipitation of Warmest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B19 - Precipitation of Coldest Quarter")
    #     create_experiment_page.select_run()
    #     view_experiment_page = create_experiment_page.select_review_start_experiment()
    #     self.assertEqual("BCCVL Experiment Results", view_experiment_page.title)
    #     view_experiment_page.wait_till_text_displayed("This Experiment is running", 240)
    #     view_experiment_page.wait_till_text_displayed("This Experiment is complete. The results are available below.", 840)
    #     # view_experiment_page.select_results()
    #     # view_experiment_page.check_text_displayed("bioclim_01_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_02_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_03_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_04_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_05_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_06_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_07_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_08_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_09_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_10_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_11_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_12_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_13_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_14_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_15_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_16_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_17_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_18_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_19_response.png")
    #     # view_experiment_page.check_text_displayed("biomod2_like_VariableImportance.csv")
    #     # view_experiment_page.check_text_displayed("combined.modelEvaluation.csv")
    #     # view_experiment_page.check_text_displayed("current.tif")
    #     # view_experiment_page.check_text_displayed("dismo.eval.object.RData")
    #     # view_experiment_page.check_text_displayed("future.tif")
    #     # view_experiment_page.check_text_displayed("maxent_like_VariableImportance.csv")
    #     # view_experiment_page.check_text_displayed("model.object.RData")
    #     # view_experiment_page.check_text_displayed("results.html")

    # def test_brt_model_evaluate_config_2(self):

    #     print sys._getframe().f_code.co_name
    #     plone_homepage = PloneHomepage(self.driver)
    #     self.assertEqual("BCCVL Home", plone_homepage.title)
    #     bccvl_homepage = plone_homepage.valid_login('admin', 'admin')
    #     self.assertEqual("BCCVL Home", bccvl_homepage.title)
    #     experiment_homepage = bccvl_homepage.click_experiments()
    #     self.assertEqual("BCCVL Experiment List", experiment_homepage.title)
    #     create_experiment_page = experiment_homepage.click_new_sdm_experiment()
    #     self.assertEqual("BCCVL New SDM Experiment", create_experiment_page.title)
    #     create_experiment_page.enter_experiment_name("Phascolarctos cinereus brt model config2")
    #     create_experiment_page.enter_experiment_description("Phascolarctos cinereus brt model with modified parameters, a current projection, and model evaluation")
    #     create_experiment_page.select_configuration()
    #     create_experiment_page.select_sdm_algorithm("Boosted Regression Tree")
    #     create_experiment_page.select_algorithms_configuration("Boosted Regression Tree")
    #     create_experiment_page.enter_brt_config_tree_complexity("15")
    #     create_experiment_page.enter_brt_config_learning_rate("0.005")
    #     create_experiment_page.enter_brt_config_bag_fraction("1")
    #     create_experiment_page.enter_brt_config_var_monotone("+1")
    #     create_experiment_page.enter_brt_config_n_folds("10")
    #     create_experiment_page.enter_brt_config_prev_stratify(True)
    #     create_experiment_page.enter_brt_config_family("bernoulli (binomial)")
    #     create_experiment_page.enter_brt_config_n_trees("100")
    #     create_experiment_page.enter_brt_config_max_trees("25000")
    #     create_experiment_page.enter_brt_config_tolerance_method("auto")
    #     create_experiment_page.enter_brt_config_tolerance_value("0.01")
    #     create_experiment_page.select_occurrences()
    #     create_experiment_page.select_occurrences_dataset("Koala - Mini occurrence dataset for Redland City")
    #     create_experiment_page.select_absences()
    #     create_experiment_page.select_absences_dataset("Koala - Mini absence dataset for Redland City")
    #     create_experiment_page.select_environment()
    #     create_experiment_page.select_current_climate_layers("Current climate layers for Australia, 2.5arcmin (~5km)")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B01 - Annual Mean Temperature")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B02 - Mean Diurnal Range (Mean of monthly (max temp - min temp))")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B03 - Isothermality (BIO2/BIO7) (* 100)")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B04 - Temperature Seasonality (standard deviation *100)")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B05 - Max Temperature of Warmest Month")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B06 - Min Temperature of Coldest Month")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B07 - Temperature Annual Range (BIO5-BIO6)")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B08 - Mean Temperature of Wettest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B09 - Mean Temperature of Driest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B10 - Mean Temperature of Warmest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B11 - Mean Temperature of Coldest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B12 - Annual Precipitation")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B13 - Precipitation of Wettest Month")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B14 - Precipitation of Driest Month")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B15 - Precipitation Seasonality (Coefficient of Variation)")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B16 - Precipitation of Wettest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B17 - Precipitation of Driest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B18 - Precipitation of Warmest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B19 - Precipitation of Coldest Quarter")
    #     create_experiment_page.select_run()
    #     view_experiment_page = create_experiment_page.select_review_start_experiment()
    #     self.assertEqual("BCCVL Experiment Results", view_experiment_page.title)
    #     view_experiment_page.wait_till_text_displayed("This Experiment is running", 240)
    #     view_experiment_page.wait_till_text_displayed("This Experiment is complete. The results are available below.", 840)
    #     # view_experiment_page.select_results()
    #     # view_experiment_page.check_text_displayed("bioclim_01_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_02_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_03_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_04_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_05_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_06_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_07_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_08_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_09_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_10_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_11_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_12_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_13_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_14_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_15_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_16_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_17_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_18_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_19_response.png")
    #     # view_experiment_page.check_text_displayed("biomod2_like_VariableImportance.csv")
    #     # view_experiment_page.check_text_displayed("combined.modelEvaluation.csv")
    #     # view_experiment_page.check_text_displayed("current.tif")
    #     # view_experiment_page.check_text_displayed("dismo.eval.object.RData")
    #     # view_experiment_page.check_text_displayed("future.tif")
    #     # view_experiment_page.check_text_displayed("maxent_like_VariableImportance.csv")
    #     # view_experiment_page.check_text_displayed("model.object.RData")
    #     # view_experiment_page.check_text_displayed("results.html")

    # def test_create_brt_and_bioclim_experiment(self): #results may change

    #     print sys._getframe().f_code.co_name
    #     plone_homepage = PloneHomepage(self.driver)
    #     self.assertEqual("BCCVL Home", plone_homepage.title)
    #     bccvl_homepage = plone_homepage.valid_login('admin', 'admin')
    #     self.assertEqual("BCCVL Home", bccvl_homepage.title)
    #     experiment_homepage = bccvl_homepage.click_experiments()
    #     self.assertEqual("BCCVL Experiment List", experiment_homepage.title)
    #     create_experiment_page = experiment_homepage.click_new_sdm_experiment()
    #     self.assertEqual("BCCVL New SDM Experiment", create_experiment_page.title)
    #     create_experiment_page.enter_experiment_name("ABT bioclim + brt model and evaluation")
    #     create_experiment_page.enter_experiment_description("ABT bioclim + brt model, current projection, and model evaluation")
    #     create_experiment_page.select_configuration()
    #     create_experiment_page.select_sdm_algorithm("Bioclim")
    #     create_experiment_page.select_sdm_algorithm("Boosted Regression Tree")
    #     create_experiment_page.select_occurrences()
    #     create_experiment_page.select_occurrences_dataset("Koala - Mini occurrence dataset for Redland City")
    #     create_experiment_page.select_absences()
    #     create_experiment_page.select_absences_dataset("Koala - Mini absence dataset for Redland City")
    #     create_experiment_page.select_environment()
    #     create_experiment_page.select_current_climate_layers("Current climate layers for Australia, 2.5arcmin (~5km)")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B01 - Annual Mean Temperature")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B02 - Mean Diurnal Range (Mean of monthly (max temp - min temp))")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B03 - Isothermality (BIO2/BIO7) (* 100)")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B04 - Temperature Seasonality (standard deviation *100)")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B05 - Max Temperature of Warmest Month")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B06 - Min Temperature of Coldest Month")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B07 - Temperature Annual Range (BIO5-BIO6)")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B08 - Mean Temperature of Wettest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B09 - Mean Temperature of Driest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B10 - Mean Temperature of Warmest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B11 - Mean Temperature of Coldest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B12 - Annual Precipitation")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B13 - Precipitation of Wettest Month")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B14 - Precipitation of Driest Month")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B15 - Precipitation Seasonality (Coefficient of Variation)")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B16 - Precipitation of Wettest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B17 - Precipitation of Driest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B18 - Precipitation of Warmest Quarter")
    #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B19 - Precipitation of Coldest Quarter")
    #     create_experiment_page.select_run()
    #     view_experiment_page = create_experiment_page.select_review_start_experiment()
    #     self.assertEqual("BCCVL Experiment Results", view_experiment_page.title)
    #     view_experiment_page.wait_till_text_displayed("This Experiment is running", 240)
    #     view_experiment_page.wait_till_text_displayed("This Experiment is complete. The results are available below.", 840)
    #     # view_experiment_page.select_results()
    #     # view_experiment_page.check_text_displayed("bioclim_01_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_02_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_03_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_04_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_05_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_06_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_07_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_08_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_09_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_10_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_11_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_12_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_13_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_14_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_15_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_16_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_17_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_18_response.png")
    #     # view_experiment_page.check_text_displayed("bioclim_19_response.png")
    #     # view_experiment_page.check_text_displayed("biomod2_like_VariableImportance.csv")
    #     # view_experiment_page.check_text_displayed("combined.modelEvaluation.csv")
    #     # view_experiment_page.check_text_displayed("current.tif")
    #     # view_experiment_page.check_text_displayed("dismo.eval.object.RData")
    #     # view_experiment_page.check_text_displayed("future.tif")
    #     # view_experiment_page.check_text_displayed("maxent_like_VariableImportance.csv")
    #     # view_experiment_page.check_text_displayed("model.object.RData")
    #     # view_experiment_page.check_text_displayed("results.html")

    # # def test_incorrect_species_are_shown_when_searching_for_species_with_ala_BCCVL326_Bug(self):
    # #
    # #     print sys._getframe().f_code.co_name
    # #     plone_homepage = PloneHomepage(self.driver)
    # #     self.assertEqual("BCCVL Home", plone_homepage.title)
    # #     bccvl_homepage = plone_homepage.valid_login('admin', 'admin')
    # #     self.assertEqual("BCCVL Home", bccvl_homepage.title)
    # #     data_homepage = bccvl_homepage.click_data()
    # #     self.assertEqual("BCCVL My Dataset", data_homepage.title)
    # #     dataset_page = data_homepage.new_dataset()
    # #     dataset_page.enter_ala_search_string("Canis lupus")
    # #     dataset_page.select_ala_dataset_to_download("(subspecies) Canis lupus dingo Dingo, Domestic Dog")
    # #     dataset_page.check_species_selection("(species) 17659 occurrences from ALA")

    # def test_browser_forward_and_back_button_sequential(self):

    #     print sys._getframe().f_code.co_name
    #     plone_homepage = PloneHomepage(self.driver)
    #     self.assertEqual("BCCVL Home", plone_homepage.title)
    #     bccvl_homepage = plone_homepage.valid_login('admin', 'admin')
    #     self.assertEqual("BCCVL Home", bccvl_homepage.title)
    #     experiment_homepage = bccvl_homepage.click_experiments()
    #     self.assertEqual("BCCVL Experiment List", experiment_homepage.title)
    #     create_experiment_page = experiment_homepage.click_new_sdm_experiment()
    #     self.assertEqual("BCCVL New SDM Experiment", create_experiment_page.title)
    #     create_experiment_page.select_configuration()
    #     create_experiment_page.select_occurrences()
    #     create_experiment_page.select_absences()
    #     create_experiment_page.select_environment()
    #     create_experiment_page.select_run()
    #     self.driver.back()
    #     create_experiment_page.check_text_displayed("Environmental Datasets")
    #     self.driver.back()
    #     create_experiment_page.check_text_displayed("Species Absence Datasets")
    #     self.driver.back()
    #     create_experiment_page.check_text_displayed("Species Occurrence Datasets")
    #     self.driver.back()
    #     create_experiment_page.check_text_displayed("Species Distribution Model Production Algorithms")
    #     self.driver.back()
    #     create_experiment_page.check_experiment_name_textbox()
    #     self.driver.forward()
    #     create_experiment_page.check_text_displayed("Species Distribution Model Production Algorithms")
    #     self.driver.forward()
    #     create_experiment_page.check_text_displayed("Species Occurrence Datasets")
    #     self.driver.forward()
    #     create_experiment_page.check_text_displayed("Species Absence Datasets")
    #     self.driver.forward()
    #     create_experiment_page.check_text_displayed("Environmental Datasets")
    #     self.driver.forward()
    #     create_experiment_page.check_review_start_experiment()



    # def test_browser_forward_and_back_button_jump(self):

    #     print sys._getframe().f_code.co_name
    #     plone_homepage = PloneHomepage(self.driver)
    #     self.assertEqual("BCCVL Home", plone_homepage.title)
    #     bccvl_homepage = plone_homepage.valid_login('admin', 'admin')
    #     self.assertEqual("BCCVL Home", bccvl_homepage.title)
    #     experiment_homepage = bccvl_homepage.click_experiments()
    #     self.assertEqual("BCCVL Experiment List", experiment_homepage.title)
    #     create_experiment_page = experiment_homepage.click_new_sdm_experiment()
    #     self.assertEqual("BCCVL New SDM Experiment", create_experiment_page.title)
    #     create_experiment_page.select_occurrences()
    #     create_experiment_page.select_configuration()
    #     create_experiment_page.select_environment()
    #     create_experiment_page.select_absences()
    #     create_experiment_page.select_description()
    #     create_experiment_page.select_occurrences()
    #     create_experiment_page.select_run()
    #     self.driver.back()
    #     create_experiment_page.check_text_displayed("Species Occurrence Datasets")
    #     self.driver.back()
    #     create_experiment_page.check_experiment_name_textbox()
    #     self.driver.back()
    #     create_experiment_page.check_text_displayed("Species Absence Datasets")
    #     self.driver.back()
    #     create_experiment_page.check_text_displayed("Environmental Datasets")
    #     self.driver.back()
    #     create_experiment_page.check_text_displayed("Species Distribution Model Production Algorithms")
    #     self.driver.back()
    #     create_experiment_page.check_text_displayed("Species Occurrence Datasets")
    #     self.driver.back()
    #     create_experiment_page.check_experiment_name_textbox()
    #     self.driver.forward()
    #     create_experiment_page.check_text_displayed("Species Occurrence Datasets")
    #     self.driver.forward()
    #     create_experiment_page.check_text_displayed("Species Distribution Model Production Algorithms")
    #     self.driver.forward()
    #     create_experiment_page.check_text_displayed("Environmental Datasets")
    #     self.driver.forward()
    #     create_experiment_page.check_text_displayed("Species Absence Datasets")
    #     self.driver.forward()
    #     create_experiment_page.check_experiment_name_textbox()
    #     self.driver.forward()
    #     create_experiment_page.check_text_displayed("Species Occurrence Datasets")
    #     self.driver.forward()
    #     create_experiment_page.check_review_start_experiment()

    # # def test_upload_new_dataset(self):
    # #
    # #     print sys._getframe().f_code.co_name
    # #     plone_homepage = PloneHomepage(self.driver)
    # #     self.assertEqual("BCCVL Home", plone_homepage.title)
    # #     bccvl_homepage = plone_homepage.valid_login('admin', 'admin')
    # #     self.assertEqual("BCCVL Home", bccvl_homepage.title)
    # #     data_homepage = bccvl_homepage.click_data()
    # #     self.assertEqual("BCCVL Dataset List", data_homepage.title)
    # #     dataset_page = data_homepage.new_dataset()
    # #     dataset_page.upload_new_dataset()
    # #     dataset_page.upload_data_file("/end_to_end_tests/test_data/bulk_image.csv") # file located in test_data
    # #     dataset_page.select_dataset_type_special_occurrence()
    # #     dataset_page.enter_dataset_title("test_upload")
    # #     dataset_page.enter_dataset_description("testing upload of dataset files")
    # #     dataset_page.select_upload_dataset()
    # #     time.sleep(30)
    # #     dataset_page.select_my_dataset()
    # #     dataset_page.check_text_displayed("test_upload")
    # #     dataset_page.check_text_displayed("testing upload of dataset files")
    # #     dataset_page.check_text_displayed("bulk_image.csv")
    # #

    # # Not completed below
    # # def test_check_experiment_files_match(self):
    # #
    # #     plone_homepage = PloneHomepage(self.driver)
    # #     self.assertEqual("BCCVL Home", plone_homepage.title)
    # #     bccvl_homepage = plone_homepage.valid_login('admin', 'admin')
    # #     self.assertEqual("BCCVL Home", bccvl_homepage.title)
    # #     experiment_homepage = bccvl_homepage.click_experiments()
    # #     self.assertEqual("BCCVL Experiment List", experiment_homepage.title)
    # #     create_experiment_page = experiment_homepage.click_new_sdm_experiment()
    # #     self.assertEqual("BCCVL New SDM Experiment", create_experiment_page.title)
    # #     create_experiment_page.enter_experiment_name("Check_experiment_files")
    # #     create_experiment_page.enter_experiment_description("Bioclim model, current projection, and model evaluation, files checking")
    # #     create_experiment_page.select_configuration()
    # #     create_experiment_page.select_sdm_algorithm("Bioclim")
    # #     create_experiment_page.select_occurrences()
    # #     create_experiment_page.select_occurrences_dataset("Koala - Mini occurrence dataset for Redland City")
    # #     create_experiment_page.select_absences()
    # #     create_experiment_page.select_absences_dataset("Koala - Mini absence dataset for Redland City")
    # #     create_experiment_page.select_environment()
    # #     create_experiment_page.select_current_climate_layers("Current climate layers for Australia, 2.5arcmin (~5km)")
    # #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B01 - Annual Mean Temperature")
    # #     create_experiment_page.select_environmental_datasets("Current climate layers for Australia, 2.5arcmin (~5km)", "B02 - Mean Diurnal Range (Mean of monthly (max temp - min temp))")
    # #     create_experiment_page.select_run()
    # #     view_experiment_page = create_experiment_page.select_review_start_experiment()
    # #     self.assertEqual("BCCVL Experiment Results", view_experiment_page.title)
    # #     view_experiment_page.wait_till_text_displayed("This Experiment is running", 120)
    # #     view_experiment_page.wait_till_text_displayed("This Experiment is retrieving data", 840)
    # #     view_experiment_page.wait_till_text_displayed("This Experiment is complete. The results are available below.", 600)
    # #     view_experiment_page.select_details()
    # #     view_experiment_page.check_text_displayed("Bioclim")
    # #     view_experiment_page.check_text_displayed("Koala - Mini occurrence dataset for Redland City")
    # #     view_experiment_page.check_text_displayed(" Koala - Mini absence dataset for Redland City ")
    # #     view_experiment_page("Check_experiment_files")
    # #     view_experiment_page("Bioclim model, current projection, and model evaluation, files checking")
    # #     view_experiment_page.select_results()
    # #     view_experiment_page.check_text_displayed("dismo.eval.object.RData")
    # #     view_experiment_page.check_text_displayed("AUC.png")
    # #     view_experiment_page.check_text_displayed("results.html")
    # #     view_experiment_page.check_text_displayed("biomod2_like_VariableImportance.csv")
    # #     view_experiment_page.check_text_displayed("maxent_like_VariableImportance.csv")
    # #     view_experiment_page.check_text_displayed("combined.modelEvaluation.csv")
    # #     view_experiment_page.check_text_displayed("current.tif")
    # #     view_experiment_page.check_text_displayed("model.object.RData")
    # #     view_experiment_page.check_text_displayed("Bioclim.Rout")
    # #     view_experiment_page.check_text_displayed("bioclim_01_response.png")
    # #     view_experiment_page.check_text_displayed("bioclim_02_response.png")
    # #     view_experiment_page.check_text_displayed("results.html.zip")
    # #     view_experiment_page.downalod_experiment_results("dismo.eval.object.RData")
    # #     generate md5 for that file
    # #     self.assertEqual(view_experiment_page.generate_checksum('PathOne'), view_experiment_page.generate_checksum('/end_to_end_tests/test_data/bulk_image.csv'))
    # #
    # # def test_download_files(self):
    # #     plone_homepage = PloneHomepage(self.driver)
    # #     self.assertEqual("BCCVL Home", plone_homepage.title)
    # #     bccvl_homepage = plone_homepage.valid_login('admin', 'admin')
    # #     self.assertEqual("BCCVL Home", bccvl_homepage.title)
    # #     experiment_homepage = bccvl_homepage.click_experiments()
    # #     self.assertEqual("BCCVL Experiment List", experiment_homepage.title)
    # #     view_experiment_page = experiment_homepage.click_existing_experiment("check_experiment_files-6")
    # #     view_experiment_page.select_results()
    # #     view_experiment_page.downalod_experiment_results("dismo.eval.object.RData")
    # #     view_experiment_page.downalod_experiment_results("AUC.png")
    # #     view_experiment_page.downalod_experiment_results("results.html")
    # #     view_experiment_page.downalod_experiment_results("biomod2_like_VariableImportance.csv")
    # #     view_experiment_page.downalod_experiment_results("maxent_like_VariableImportance.csv")
    # #     view_experiment_page.downalod_experiment_results("combined.modelEvaluation.csv")
    # #     view_experiment_page.downalod_experiment_results("current.tif")
    # #     view_experiment_page.downalod_experiment_results("model.object.RData")
    # #     view_experiment_page.downalod_experiment_results("Bioclim.Rout")
    # #     view_experiment_page.downalod_experiment_results("bioclim_01_response.png")
    # #     view_experiment_page.downalod_experiment_results("bioclim_02_response.png")
    # #     view_experiment_page.downalod_experiment_results("results.html.zip")
    # #
    # #
    # #     self.assertEqual(view_experiment_page.generate_checksum('Filepath1'), view_experiment_page.generate_checksum('Filepath2'))

    def tearDown(self):

        self.driver.quit()
        self.display.stop()
